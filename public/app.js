// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.ready();
tg.expand();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let chatHistory = [];
let selectedModel = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    currentUser = tg.initDataUnsafe?.user || {
        first_name: '–ì–æ—Å—Ç—å',
        id: Date.now()
    };
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.getElementById('userName').textContent = 
        `–ü—Ä–∏–≤–µ—Ç, ${currentUser.first_name}!`;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
    loadModels();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    tg.MainButton.text = "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É";
    tg.MainButton.onClick(() => showLeadForm());
    tg.MainButton.show();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
async function loadModels() {
    try {
        const response = await fetch('/api/models');
        const models = await response.json();
        renderModels(models);
    } catch (error) {
        console.error('Error loading models:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
function renderModels(models) {
    const grid = document.getElementById('modelsGrid');
    grid.innerHTML = models.map(model => `
        <div class="model-card" onclick="selectModel('${model.id}')">
            <img src="${model.image}" alt="${model.name}">
            <div class="model-info">
                <h3>${model.name}</h3>
                <div class="model-price">–æ—Ç ${model.price.toLocaleString('ru-RU')} ‚ÇΩ</div>
                <p>${model.highlight}</p>
                <ul class="model-features">
                    ${model.features.slice(0, 3).map(f => `<li>${f}</li>`).join('')}
                </ul>
                <button class="btn-primary" style="width: 100%;">
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
            </div>
        </div>
    `).join('');
}

// –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
function selectModel(modelId) {
    selectedModel = modelId;
    showLeadForm();
}

// –ù–∞—á–∞–ª–æ –∫–≤–∏–∑–∞
function startQuiz() {
    document.getElementById('mainScreen').classList.add('hidden');
    document.getElementById('chatScreen').classList.remove('hidden');
    
    // –ò–∑–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
    tg.BackButton.show();
    tg.BackButton.onClick(() => backToMain());
}

// –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
function backToMain() {
    document.getElementById('chatScreen').classList.add('hidden');
    document.getElementById('mainScreen').classList.remove('hidden');
    tg.BackButton.hide();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
async function sendMessage() {
    const input = document.getElementById('messageInput');
    const message = input.value.trim();
    
    if (!message) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage(message, 'user');
    input.value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showTypingIndicator();
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message,
                userId: currentUser.id,
                history: chatHistory
            })
        });
        
        const data = await response.json();
        hideTypingIndicator();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        addMessage(data.response, 'bot');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        chatHistory.push(
            { role: 'user', content: message },
            { role: 'assistant', content: data.response }
        );
        
    } catch (error) {
        console.error('Chat error:', error);
        hideTypingIndicator();
        addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'bot');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(text, sender) {
    const messagesDiv = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;
    
    messageDiv.innerHTML = `
        <div class="avatar">${sender === 'user' ? 'üë§' : 'ü§ñ'}</div>
        <div class="text">${text}</div>
    `;
    
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
function showTypingIndicator() {
    const indicator = document.createElement('div');
    indicator.id = 'typingIndicator';
    indicator.className = 'message bot';
    indicator.innerHTML = `
        <div class="avatar">ü§ñ</div>
        <div class="text">–ü–µ—á–∞—Ç–∞–µ—Ç...</div>
    `;
    document.getElementById('chatMessages').appendChild(indicator);
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    if (indicator) indicator.remove();
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏
function showLeadForm() {
    document.getElementById('leadForm').classList.remove('hidden');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    document.getElementById('leadForm').classList.add('hidden');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
async function submitLead(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data.userId = currentUser.id;
    data.userName = currentUser.first_name;
    data.chatHistory = chatHistory;
    
    try {
        const response = await fetch('/api/lead', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        if (response.ok) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            tg.showAlert('‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.');
            closeModal();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
            tg.sendData(JSON.stringify({
                type: 'lead',
                data: data
            }));
        } else {
            throw new Error('Failed to submit lead');
        }
    } catch (error) {
        console.error('Lead submission error:', error);
        tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
function calculateCredit() {
    const price = parseInt(document.getElementById('carPrice').value);
    const downPaymentPercent = parseInt(document.getElementById('downPayment').value);
    const termYears = parseInt(document.getElementById('creditTerm').value);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    document.getElementById('downPaymentValue').textContent = `${downPaymentPercent}%`;
    document.getElementById('creditTermValue').textContent = `${termYears} –ª–µ—Ç`;
    
    // –†–∞—Å—á–µ—Ç
    const downPayment = price * (downPaymentPercent / 100);
    const creditAmount = price - downPayment;
    const monthlyRate = 0.12 / 12; // 12% –≥–æ–¥–æ–≤—ã—Ö
    const months = termYears * 12;
    
    const monthlyPayment = creditAmount * 
        (monthlyRate * Math.pow(1 + monthlyRate, months)) / 
        (Math.pow(1 + monthlyRate, months) - 1);
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    document.getElementById('monthlyPayment').textContent = 
        `${Math.round(monthlyPayment).toLocaleString('ru-RU')} ‚ÇΩ`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
document.getElementById('messageInput')?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});
